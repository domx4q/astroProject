name: Build and Release Vue.js App + Electron App

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 16.14.0 ]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build app
        run: npm run build
      - name: Zip-Release4cpp
        uses: darshitsri/zip-release@v3
        with:
          filename: release.zip
          path: ./dist/
          directory: .
      - name: Build electron app
        uses: ./.github/workflows/electronBuild
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: electron-app
          path: dist_electron/
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get current package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.current-version}}
          release_name: Release ${{ steps.package-version.outputs.current-version}}
          body: ${{steps.github_release.outputs.changelog}}
          draft: false
          prerelease: false
      - name: Upload Release Asset Zip Code
        id: upload-release-asset-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release.zip
          asset_name: release.zip
          asset_content_type: application/zip
      - name: Upload Release Asset Electron (Windows)
        id: upload-release-asset-electron-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: $(find ./dist_electron/windows-latest -name "*Setup*.exe")
          asset_name: $(find ./dist_electron/windows-latest -name "*Setup*.exe")
          asset_content_type: application/x-msdownload
      - name: Upload Release Asset Electron (MacOS)
        id: upload-release-asset-electron-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: $(find ./dist_electron/macos-latest -name "*.dmg")
          asset_name: $(find ./dist_electron/macos-latest -name "*.dmg")
          asset_content_type: application/x-apple-diskimage
      - name: Upload Release Asset Electron (Linux)
        id: upload-release-asset-electron-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: $(find ./dist_electron/ubuntu-latest -name "*.deb")
          asset_name: $(find ./dist_electron/ubuntu-latest -name "*.deb")
          asset_content_type: application/x-deb
